@*<Chapter6 Top>*@
@page "/admin/blogposts/new"
@page "/admin/blogposts/{Id}"
@using Components.Interfaces
@inject IBlogNotificationService notificationService
@inject IBlogApi _api
@inject NavigationManager _manager
@inject Components.Interfaces.IBrowserStorage storage
@using Components.RazorComponents
@using Markdig;
@*</Chapter6 Top>*@
@*<Chapter6 EditForm>*@
<EditForm Model="Post" OnValidSubmit="SavePost">
    <DataAnnotationsValidator />
    <CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />
    <InputText @bind-Value="Post.Title"/>
    <ValidationMessage For="()=>Post.Title"/>
    <InputDate @bind-Value="Post.PublishDate"/>
    <ValidationMessage For="()=>Post.PublishDate"/>
    <InputSelect @bind-Value="selectedCategory">
        <option value="0" disabled>None selected</option>
        @foreach (var category in Categories)
        {
            <option value="@category.Id">@category.Name </option>
        }
    </InputSelect>

    <ul>
        @foreach (var tag in Tags)
        {
        <li>
            @tag.Name
            @if (Post.Tags.Any(t => t.Id == tag.Id))
            {
                <button type="button" @onclick="@(() => {Post.Tags.Remove(Post.Tags.Single(t=>t.Id==tag.Id)); })">Remove</button>
            }
            else
            {
                <button type="button" @onclick="@(()=> { Post.Tags.Add(tag); })">Add</button>
            }
        </li>
        }
    </ul>
        <InputTextAreaOnInput @bind-Value="Post.Text" @onkeyup="UpdateHTMLAsync"/>
        <ValidationMessage For="()=>Post.Text"/>
        <button type="submit" class="btn btn-success">Save</button>
    </EditForm>
@*</Chapter6 EditForm>*@
    @((MarkupString)markDownAsHTML)

@code
{
    @*<Chapter6 Parameters>*@
    [Parameter]
    public string? Id { get; set; }
    BlogPost Post { get; set; } = new BlogPost();
    List<Category> Categories { get; set; }=new();
    List<Tag> Tags { get; set; }= new();
    string? selectedCategory = null;
    string? markDownAsHTML { get; set; }
    @*</Chapter6 Parameters>*@
    @*<Chapter6 SavePost>*@
    public async Task SavePost()
    {
        if (!string.IsNullOrEmpty(selectedCategory) && Categories != null)
        {
            var category = Categories.FirstOrDefault(c =>c.Id == selectedCategory);
            if (category != null)
            {
                Post.Category = category;
            }
        }
        await _api.SaveBlogPostAsync(Post);
        _manager.NavigateTo("/admin/blogposts");
    }

    @*</Chapter6 SavePost>*@
    @*<Chapter6 Markdig>*@
    MarkdownPipeline pipeline;
    protected override Task OnInitializedAsync()
    {
        pipeline = new MarkdownPipelineBuilder()
                 .UseEmojiAndSmiley()
                 .Build();
        return base.OnInitializedAsync();
    }
    @*</Chapter6 Markdig>*@
    @*<Chapter6 Update>*@
    //protected void UpdateHTML()
    //{
    //    markDownAsHTML = Markdig.Markdown.ToHtml(Post.Text, pipeline);
    //}
    //<Chapter11>
    protected async Task UpdateHTMLAsync()
    {
        if (Post.Text != null)
        {
            await notificationService.SendNotification(Post);
            markDownAsHTML = Markdig.Markdown.ToHtml(Post.Text, pipeline);
            if (string.IsNullOrEmpty(Post.Id))
            {
                await storage.SetAsync("EditCurrentPost", Post);
            }
        }
    }
    //</Chapter11>

    bool hasTag(Tag tag)
    {
        return Post.Tags.Contains(tag);
    }
    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            Post = await _api.GetBlogPostAsync(Id);
            if (Post.Category != null)
            {
               selectedCategory = Post.Category.Id;
            }
            UpdateHTMLAsync();
        }
        Categories = await _api.GetCategoriesAsync();
        Tags = await _api.GetTagsAsync();
        base.OnParametersSet();
    }
    @*</Chapter6 Update>*@

    override protected async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && string.IsNullOrEmpty(Id))
        {
            var saved = await storage.GetAsync<BlogPost>("EditCurrentPost");
            if (saved != null)
            {
                Post = saved;
                StateHasChanged();
            }
        }
        base.OnAfterRenderAsync(firstRender);
    }
}